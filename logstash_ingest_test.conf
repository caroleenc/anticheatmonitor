input {
  file {
    path =>"/Users/caroleenchen/Documents/GeorgiaTech/Practicum/AntiCheatMonitor/log_files/be_unturned_cut.CSV"
    start_position =>"beginning"
    sincedb_path =>"/dev/null"
  }
}
filter {
  csv {
      separator =>","
      skip_header =>true
      quote_char => '"'
      columns => [
         "Time of Day",
         "Process Name",
         "PID",
         "Operation", 
         "Path",
         "Result",
         "Detail"
         ]
      }
  mutate {
    add_field => {
      new_timestamp => "2024-10-25 %{[Time of Day]}"
    }
    remove_field => ["User Time"]
  }
  date {
      match => ["new_timestamp", "yyyy-MM-dd h:mm:ss.SSSSSSS a"]
      timezone => "UTC"
      target => "@timestamp"
  }
  mutate {
    remove_field => ["new_timestamp"]
  }
  kv {
      source => "Detail"
      field_split =>","
      value_split => ":"
      trim_key => " "
      trim_value => " "
      recursive => true
      exclude_keys => ["CreationTime", "LastAccessTime", "LastWriteTime", "ChangeTime", "VolumeCreationTime", "Data"]
      tag_on_failure => "_kvparsefailure"  # Add a failure tag for KV parse failures
  }
  if "->" in [Path] {
      grok {
          match => {
              "Path" => "%{HOSTNAME:source_host}:%{NUMBER:source_port} -> %{HOSTNAME:destination_host}:%{NUMBER:destination_port}"
              tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
          }
      }
      mutate {
          rename => {
              "source_host" => "[source][host]"
              "source_port" => "[source][port]"
              "destination_host" => "[destination][host]"
              "destination_port" => "[destination][port]"
          }
      }
  }
  if [User Time] {
    grok {
      match => { "User Time" => "%{NUMBER:user_time_seconds} seconds" }
      tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    
    mutate {
      convert => {
        "user_time_seconds" => "float"
      }
      remove_field => ["User Time"]
      rename => {"user_time_seconds" => "User Time" }
    }
  }
  if [Kernel Time] {
    grok {
      match => { "Kernel Time" => "%{NUMBER:kern_time_seconds} seconds" }
      tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    
    mutate {
      convert => {
        "kern_time_seconds" => "float"
      }
      remove_field => ["Kernel Time"]
      rename => {"kern_time_seconds" => "Kernel Time" }
    }
  }
  if [Detail] =~ /VolumeCreationTime:/ {
    grok {
        match => { "Detail" => "VolumeCreationTime: (?<VolumeCreationTime>[^,]+)"}
        tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    date {
        match => ["VolumeCreationTime", "MM/dd/yyyy h:mm:ss a"]
        target => "VolumeCreationTime"
    }
  }
  if [Detail] =~ /CreationTime:/ {
    grok {
        match => { "Detail" => "CreationTime: (?<CreationTime>[^,]+)"}
        tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    date {
        match => ["CreationTime", "MM/dd/yyyy h:mm:ss a"]
        target => "CreationTime"
    }
  }
    if [Detail] =~ /LastAccessTime:/ {
    grok {
        match => { "Detail" => "LastAccessTime: (?<LastAccessTime>[^,]+)"}
        tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    date {
        match => ["LastAccessTime", "MM/dd/yyyy h:mm:ss a"]
        target => "LastAccessTime"
    }
  }
  if [Detail] =~ /LastWriteTime:/ {
    grok {
        match => { "Detail" => "LastWriteTime: (?<LastWriteTime>[^,]+)"}
        tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    date {
        match => ["LastWriteTime", "MM/dd/yyyy h:mm:ss a"]
        target => "LastWriteTime"
    }
  }
  if [Detail] =~ /ChangeTime:/ {
    grok {
        match => { "Detail" => "ChangeTime: (?<ChangeTime>[^,]+)"}
        tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
    date {
        match => ["ChangeTime", "MM/dd/yyyy h:mm:ss a"]
        target => "ChangeTime"
    }
  }
  if [Detail] =~ /Data:/ {
    grok {
      match => { "Detail" => "Data: (?<Data>[^,]+)"}
      tag_on_failure => "_grokparsefailure"  # Add a failure tag for grok parse failures
    }
  }
  mutate {
    remove_field => ["Detail"]
  }
  mutate {
      remove_field => ["message"]
  }
}

output {
  elasticsearch {
      hosts => ["localhost:9200"]
      index =>"test8"
  }
  if "_kvparsefailure" in [tags] or "_grokparsefailure" in [tags] {
      file {
          path => "/Users/caroleenchen/Documents/GeorgiaTech/Practicum/logstash_failed_lines.log"
          codec => "line"  # Format the log entries as single lines
      }
  }
}